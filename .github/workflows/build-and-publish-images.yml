name: Build and publish container images to AWS ECR and deploy on ECS

on:
  push:
    branches:
      - 'staging'
      - 'production'
    paths:
      - 'client/**'
      - 'datasette/**'
      - 'tiler/**'
      - '.github/**'
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}
  AWS_ECS_CLUSTER: ${{ vars.AWS_ECS_CLUSTER }}
  AWS_ECS_SERVICE: ${{ vars.AWS_ECS_CLUSTER }}

jobs:
  build_and_deploy:
    name: Build image, push to ECR and deploy on ECS
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        service-name:
          - client
          - datasette
          - tiler
    env:
      REPOSITORY: ${{ matrix.service-name }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Prepare task definition template
        env:
          AWS_ECS_EXECUTION_ROLE_ARN: ${{ vars.AWS_ECS_EXECUTION_ROLE_ARN }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          envsubst < ${{ env.REPOSITORY }}/infrastructure/aws/ecs/task-definition.json.tpl > ${{ env.REPOSITORY }}/infrastructure/aws/ecs/task-definition.json

      - name: Configure Docker metadata for image tags
        id: meta
        uses: docker/metadata-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{env.ECR_REGISTRY}}/${{env.REPOSITORY}}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            edge
            latest

      - name: Build and push image to ECR
        id: build-image-with-buildx
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: ${{ env.REPOSITORY }}
          push: true
          # @todo: define build-args depending on matrix element
          build-args: |
            DATASETTE_CORS_ORIGINS=${{ vars.DATASETTE_CORS_ORIGINS }}
            DATA_CORE_SQLITE_DB_SOURCE_URL=${{ vars.DATA_CORE_SQLITE_DB_SOURCE_URL }}
            DATA_CORE_SQLITE_DB_CHECKSUM=${{ vars.DATA_CORE_SQLITE_DB_CHECKSUM }}
            DATA_CORE_COG_SOURCE_URL=${{ vars.DATA_CORE_COG_SOURCE_URL }}
            DATA_CORE_COG_CHECKSUM=${{ vars.DATA_CORE_COG_CHECKSUM }}
            DATA_IRRECOVERABLE_CARBON_COG_SOURCE_URL=${{ vars.DATA_IRRECOVERABLE_CARBON_COG_SOURCE_URL}}
            DATA_IRRECOVERABLE_CARBON_COG_CHECKSUM=${{ vars.DATA_IRRECOVERABLE_CARBON_COG_CHECKSUM }}
            DATA_DEPRIVATION_INDEX_COG_SOURCE_URL=${{ vars.DATA_DEPRIVATION_INDEX_COG_SOURCE_URL }}
            DATA_DEPRIVATION_INDEX_COG_CHECKSUM=${{ vars.DATA_DEPRIVATION_INDEX_COG_CHECKSUM }}
            TILER_ROOT_PATH=${{ vars.TILER_ROOT_PATH }}
            TILER_CORS_ORIGINS_REGEX=${{ vars.TILER_CORS_ORIGINS_REGEX }}
            APP_NEXT_PUBLIC_API_URL=${{ vars.APP_NEXT_PUBLIC_API_URL }}
            APP_NEXT_PUBLIC_TITILER_API_URL=${{ vars.APP_NEXT_PUBLIC_TITILER_API_URL }}
            APP_NEXT_PUBLIC_MAPBOX_API_TOKEN=${{ vars.APP_NEXT_PUBLIC_MAPBOX_API_TOKEN }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          CONTAINER_NAME: ${{ env.REPOSITORY }}
        with:
          task-definition: ${{ env.REPOSITORY }}/infrastructure/aws/ecs/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}:edge

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.REPOSITORY }}
          cluster: ${{ env.AWS_ECS_CLUSTER }}
          wait-for-service-stability: true
