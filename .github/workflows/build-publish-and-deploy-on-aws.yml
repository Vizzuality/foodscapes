name: Build and publish container images to AWS ECR and deploy on ECS

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'staging'
      - 'production'
    paths:
      - 'client/**'
      - 'datasette/**'
      - 'tiler/**'
      - '.github/**'
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  AWS_ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
  AWS_ECS_SERVICE: ${{ secrets.AWS_ECS_CLUSTER }}

jobs:
  push_datasette_to_ecr:
    name: Push datasette image to ECR registry
    runs-on: ubuntu-22.04
    env:
      REPOSITORY: datasette
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push
        id: build-image-with-buildx
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY_NAMESPACE: ${{ steps.extract_branch.outputs.registry_namespace }}
        with:
          context: ${{ env.REPOSITORY }}
          push: true
          build-args: |
            TILER_FOODSCAPES_COG_FILENAME=${{ env.TILER_FOODSCAPES_COG_FILENAME }}
            DATA_CORE_COG_SOURCE_URL=${{ env.DATA_CORE_COG_SOURCE_URL }}
            DATA_CORE_COG_CHECKSUM=${{ env.DATA_CORE_COG_CHECKSUM }}
          tags: ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          CONTAINER_NAME: ${{ env.REPOSITORY }}
        with:
          task-definition: datasette/infrastructure/aws/ecs/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-imagewith-buildx.outputs.id }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
